# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ANP.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import os
import numpy as np
from PIL import Image as im
import time

class Ui_On_click_ANP(object):
    def setupUi(self, On_click_ANP):
        self.On_click_ANP = On_click_ANP
        self.On_click_ANP.setObjectName("On_click_ANP")
        self.On_click_ANP.setFixedSize(700, 500)
        self.Name = QtWidgets.QTextEdit(self.On_click_ANP)
        self.Name.setGeometry(QtCore.QRect(50, 390, 220, 40))
        self.Name.setInputMethodHints(QtCore.Qt.ImhUppercaseOnly)
        self.Name.setTabChangesFocus(True)
        self.Name.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.Name.setObjectName("Name")
        self.Roll = QtWidgets.QTextEdit(self.On_click_ANP)
        self.Roll.setGeometry(QtCore.QRect(430, 390, 220, 40))
        self.Roll.setInputMethodHints(QtCore.Qt.ImhDigitsOnly|QtCore.Qt.ImhMultiLine)
        self.Roll.setTabChangesFocus(True)
        self.Roll.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.Roll.setObjectName("Roll")
        self.img_label = QtWidgets.QLabel(On_click_ANP)
        self.img_label.setGeometry(QtCore.QRect(60, 10, 590, 370))
        self.img_label.setText("")
        self.img_label.setScaledContents(True)
        self.img_label.setObjectName("img_label")
        self.add_entry_btn = QtWidgets.QPushButton(self.On_click_ANP)
        self.add_entry_btn.setGeometry(QtCore.QRect(300, 450, 100, 25))
        self.add_entry_btn.setObjectName("add_entry_btn")

        self.add_entry_btn.clicked.connect(lambda: self.AddPerson())
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self.On_click_ANP)

        os.chdir("Training_images")
        # create a timer
        self.timer = QtCore.QTimer()
        # set timer timeout callback function
        self.timer.timeout.connect(self.viewCam)
        # set control_bt callback clicked  function
        self.add_entry_btn.clicked.connect(lambda: self.AddPerson())
        self.controlTimer()
        # self.ui.control_bt.clicked.connect(self.controlTimer)


    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.On_click_ANP.setWindowTitle(_translate("On_click_ANP", "ANP"))
        self.Name.setPlaceholderText(_translate("On_click_ANP", "Enter Name : "))
        self.Roll.setPlaceholderText(_translate("On_click_ANP", "Enter Roll No : "))
        self.add_entry_btn.setText(_translate("On_click_ANP", "Take Photo"))
        return

    def AddPerson(self):        
        name = self.Name.toPlainText()
        roll = self.Roll.toPlainText()
        img = str(roll)+"_"+name
        img_name = img+".png"
        cv2.imwrite(img_name,cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB))
        print("screen shot taken")
        self.close()


    def viewCam(self):
        # read image in BGR format
        ret, image = self.cap.read()
        # convert image to RGB format
        self.image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        # get image infos
        height, width, channel = image.shape
        step = channel * width
        # create QImage from image
        qImg = QtGui.QImage(self.image.data, width, height, step, QtGui.QImage.Format_RGB888)
        # show image in img_label
        self.img_label.setPixmap(QtGui.QPixmap.fromImage(qImg))

    # start/stop timer
    def controlTimer(self):
        # if timer is stopped
        if not self.timer.isActive():
            # create video capture
            self.cap = cv2.VideoCapture(0)
            # start timer
            self.timer.start(20)
        # if timer is started
        else:
            # stop timer
            self.timer.stop()
            # release video capture
            self.cap.release()